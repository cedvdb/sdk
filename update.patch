diff --git a/pkg/json/lib/json.dart b/pkg/json/lib/json.dart
index 12e0fc191a0..1a2f4ddfdab 100644
--- a/pkg/json/lib/json.dart
+++ b/pkg/json/lib/json.dart
@@ -521,7 +521,9 @@ mixin _ToJson on _Shared {
               if (doNullCheck) '!',
             ]),
             builder,
-            introspectionData),
+            introspectionData,
+            // We already are doing the null check.
+            omitNullCheck: true),
         ';\n    ',
       ]);
       if (doNullCheck) {
@@ -580,12 +582,16 @@ mixin _ToJson on _Shared {
   }
 
   /// Returns a [Code] object which is an expression that converts an instance
-  /// of type [type] (referenced by [valueReference]) into a JSON map.
+  /// of type [rawType] (referenced by [valueReference]) into a JSON map.
+  ///
+  /// Null checks will be inserted if [rawType] is  nullable, unless
+  /// [omitNullCheck] is `true`.
   Future<Code> _convertTypeToJson(
       TypeAnnotation rawType,
       Code valueReference,
       DefinitionBuilder builder,
-      _SharedIntrospectionData introspectionData) async {
+      _SharedIntrospectionData introspectionData,
+      {bool omitNullCheck = false}) async {
     final type = _checkNamedType(rawType, builder);
     if (type == null) {
       return RawCode.fromString(
@@ -599,7 +605,7 @@ mixin _ToJson on _Shared {
           "throw 'Unable to serialize type ${type.code.debugString}'");
     }
 
-    var nullCheck = type.isNullable
+    var nullCheck = type.isNullable && !omitNullCheck
         ? RawCode.fromParts([
             valueReference,
             // `null` is a reserved word, we can just use it.
@@ -635,7 +641,7 @@ mixin _ToJson on _Shared {
         case 'int' || 'double' || 'num' || 'String' || 'bool':
           return valueReference;
         case 'DateTime':
-          return RawCode.fromParts([valueReference, '.toIso8601String()']);
+          return RawCode.fromParts([if (nullCheck != null) nullCheck, valueReference, '.toIso8601String()']);
       }
     }
 
diff --git a/pkg/json/test/json_codable_test.dart b/pkg/json/test/json_codable_test.dart
index 164d0930ae8..15f48bc1ec4 100644
--- a/pkg/json/test/json_codable_test.dart
+++ b/pkg/json/test/json_codable_test.dart
@@ -130,6 +130,7 @@ void main() {
 
     test('collections of nullable objects', () {
       var json = {
+        'listOfNullableDates': [null, '2024-11-11T03:42:29.108308'],
         'listOfNullableInts': [null, 1],
         'listOfNullableSerializables': [
           {'x': 1},
@@ -139,6 +140,10 @@ void main() {
           null,
           {'a': 1, 'b': null},
         ],
+        'setOfNullableDates': [
+          null,
+          '2024-11-12T03:42:29.108308',
+        ],
         'setOfNullableInts': [
           null,
           2,
@@ -154,6 +159,10 @@ void main() {
             'b': null,
           },
         ],
+        'mapOfNullableDates': {
+          'a': '2024-11-13T03:42:29.108308',
+          'b': null,
+        },
         'mapOfNullableInts': {
           'a': 3,
           'b': null,
@@ -169,6 +178,8 @@ void main() {
       };
 
       var e = E.fromJson(json);
+      expect(e.listOfNullableDates,
+          equals([null, DateTime.parse('2024-11-11T03:42:29.108308')]));
       expect(e.listOfNullableInts, equals([null, 1]));
       expect(e.listOfNullableSerializables.first!.x, 1);
       expect(e.listOfNullableSerializables[1], null);
@@ -178,6 +189,8 @@ void main() {
             null,
             {'a': 1, 'b': null},
           ]));
+      expect(e.setOfNullableDates,
+          equals([null, DateTime.parse('2024-11-12T03:42:29.108308')]));
       expect(e.setOfNullableInts, equals({null, 2}));
       expect(e.setOfNullableSerializables.first!.x, 2);
       expect(e.setOfNullableSerializables.elementAt(1), null);
@@ -190,6 +203,12 @@ void main() {
               'b': null,
             },
           }));
+      expect(
+          e.mapOfNullableDates,
+          equals({
+            'a': DateTime.parse('2024-11-13T03:42:29.108308'),
+            'b': null,
+          }));
       expect(
           e.mapOfNullableInts,
           equals({
@@ -273,18 +292,24 @@ class D extends C {
 
 @JsonCodable()
 class E {
+  final List<DateTime?> listOfNullableDates;
+
   final List<int?> listOfNullableInts;
 
   final List<C?> listOfNullableSerializables;
 
   final List<Map<String, int?>?> listOfNullableMapsOfNullableInts;
 
+  final Set<DateTime?> setOfNullableDates;
+
   final Set<int?> setOfNullableInts;
 
   final Set<C?> setOfNullableSerializables;
 
   final Set<Map<String, int?>?> setOfNullableMapsOfNullableInts;
 
+  final Map<String, DateTime?> mapOfNullableDates;
+
   final Map<String, int?> mapOfNullableInts;
 
   final Map<String, C?> mapOfNullableSerializables;
   